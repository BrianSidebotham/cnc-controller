# 28aug2018 tjp 20:40
# tests rpi gpio under linuxcnc, i drive leds and read simple switches for now
#
# this hacks a .hal  file from Machinekit by Arceye
# it uses hal_pi_gpio module from KLChin module to drive steppers
#
# changes made:   from unipolar motor stepgen to 'normal' step dir type
#

loadrt [KINS]KINEMATICS

loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS

loadrt charge_pump
net estop-out charge-pump.enable iocontrol.0.user-enable-out
net charge-pump <= charge-pump.out

# beware, need new style 'loadrt threads' for lcnc
# was  newthread fast 100000  
# was  newthread slow 1000000 fp
# this was successful in prelim tests   loadrt threads name1=fast period1=100000 name2=slow period2=1000000


# we need a dir mask and an exclude mask
#
# ------------------outputs-----------------
# i use GPIO 2,3 for xstep zstep
# i use GPIO 12 for spindle motor on
# i use GPIO 14,15 for xdir zdir

# ------------------inputs-----------------
# i use GPIO 17 27 for xlim zlim ( used for + and - lims, used for home also )

# gpio pins ( not rpi pins! )
# 2 2  2 2 2 2  2 2 1 1  1 1 1 1  1 1 1 1 
# 7 6  5 4 3 2  1 0 9 8  7 6 5 4  3 2 1 0  9 8 7 6  5 4 3 2  (gpio1& 0 not used )
#
# 1 0  0 0 0 1  0 0 0 0  1 0 0 0  0 0 0 1  0 0 0 0  0 1 1 1  dir     mask (0 means in   1 means out)
# 0 1  1 1 1 0  1 1 1 1  0 1 1 1  0 1 0 0  0 1 1 0  0 0 0 0  exclude mask (0 means use  1 means dont use)
# 0x2108107 dir = 
# 0x1ef7460 msk = 
loadrt hal_pi_gpio dir=34636039 exclude=32470112


# beware gpio 21 and 22 are still reversed, they control rpins 15&50 and are backwards almost everywhere in rpi docs
# easy to see and check with 'show pins hal_pi_gpio*


# tjp  chg to 3 step dir types,plan on using gekco G540
# was  loadrt stepgen step_type=5 ctrl_type=v 
# make posn loop type 
loadrt stepgen step_type=0,0,0


# use velocity style stepgen with leds for motors at first
#  should be posn loop!  net speed stepgen.0.velocity-cmd


# DEBOUNCE Probe und Limits
loadrt debounce cfg=4
setp debounce.0.delay 10
addf debounce.0 base-thread

# Probe == Öffner
#net probe hal_pi_gpio.pin-18-in => motion.probe-input

# PROBE = Schließer
#loadrt not
#addf not.0 servo-thread
#net not-1-in  not.0.in  <= hal_pi_gpio.pin-18-in
#net not-1-out not.0.out => debounce.0.3.in
#net probe debounce.0.3.out => motion.probe-input


# --- begin addf s
addf hal_pi_gpio.read  base-thread
addf stepgen.make-pulses base-thread
addf charge-pump base-thread
# dang it!  i forgot to add the read funct AGAIN
addf hal_pi_gpio.write base-thread
addf stepgen.capture-position servo-thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf stepgen.update-freq servo-thread
# --- end addf s

loadrt pwmgen output_type=0
addf pwmgen.update servo-thread
addf pwmgen.make-pulses base-thread
net spindle-speed-cmd spindle.0.speed-out => pwmgen.0.value
net spindle-on spindle.0.on => pwmgen.0.enable
net spindle-pwm pwmgen.0.pwm => hal_pi_gpio.pin-19-out
# Set the spindle's top speed in RPM
setp pwmgen.0.scale 1800
setp pwmgen.0.pwm-freq 10

#net spindle-enable spindle.0.on => hal_pi_gpio.pin-7-out

# i use GPIO 2,3 for xstep zstep
#net xenable => hal_pi_gpio.pin-29-out
net xstep stepgen.0.step => hal_pi_gpio.pin-03-out
net zstep stepgen.1.step => hal_pi_gpio.pin-13-out

# i use GPIO 14,15 for xdir zdir
net xdir  stepgen.0.dir  => hal_pi_gpio.pin-05-out
net zdir  stepgen.1.dir  => hal_pi_gpio.pin-15-out


#net charge-pump => pick a gpio if used, but i dont use charge-pump for now

# i use GPIO 17 27 22 for xlim ylim zlim , thats rpins  11,13,15 resp
# ( one signal used 3 ways, used for + and - lims, used for home also )
# now add limits and homing for x
net limit-x-switch hal_pi_gpio.pin-29-in => debounce.0.0.in
net xlim debounce.0.0.out => joint.0.neg-lim-sw-in joint.0.pos-lim-sw-in joint.0.home-sw-in

# now add limits and homing for z
net limit-z-switch hal_pi_gpio.pin-33-in => debounce.0.1.in
net zlim debounce.0.1.out => joint.1.neg-lim-sw-in joint.1.pos-lim-sw-in joint.1.home-sw-in

# i use GPIO 12 for spindle motor on, thats rpin 32 ( needler is from 'needle perforator' )
#net needler hal_pi_gpio.pin-35-out

# 20 jun 2018 adding needle motor control
# NB using motion spindle requiresa S no zero value prior to M3 or M4 to make needle move
#  FUTURE net needleOn motion.spindle-on ???gpio???
#  FUTURE net needleUp ???gpio???

setp stepgen.0.position-scale [JOINT_0]SCALE
setp stepgen.0.steplen 4000
setp stepgen.0.stepspace 500
setp stepgen.0.dirhold 20000
setp stepgen.0.dirsetup 1000
setp stepgen.0.maxaccel [JOINT_0]STEPGEN_MAXACCEL
net xpos-cmd joint.0.motor-pos-cmd => stepgen.0.position-cmd
net xpos-fb stepgen.0.position-fb => joint.0.motor-pos-fb
net xstep <= stepgen.0.step
net xdir <= stepgen.0.dir
net xenable joint.0.amp-enable-out => stepgen.0.enable

setp stepgen.1.position-scale [JOINT_1]SCALE
setp stepgen.1.steplen 4000
setp stepgen.1.stepspace 500
setp stepgen.1.dirhold 20000
setp stepgen.1.dirsetup 1000
setp stepgen.1.maxaccel [JOINT_1]STEPGEN_MAXACCEL
net zpos-cmd joint.1.motor-pos-cmd => stepgen.1.position-cmd
net zpos-fb stepgen.1.position-fb => joint.1.motor-pos-fb
net zstep <= stepgen.1.step
net zdir <= stepgen.1.dir
net zenable joint.1.amp-enable-out => stepgen.1.enable

net estop-out <= iocontrol.0.user-enable-out
net estop-out => iocontrol.0.emc-enable-in

loadusr -W hal_manualtoolchange
net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared

